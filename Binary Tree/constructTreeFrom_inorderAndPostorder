#include<iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* left;
    Node* right;

    Node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

void createMapping(int in[], map<int,int> &nodeToIndex, int n){
    for(int i=0; i<n; i++){
        nodeToIndex[in[i]] = i;
    }
}

Node* solve(int in[], int post[], int &index, int inorderStart, int inorderEnd, map<int,int> &nodeToIndex){
    //base case 
    if(index < 0 || inorderStart > inorderEnd){
        return NULL;
    }

    int element = post[index--];
    Node* root = new Node(element);
    int position = nodeToIndex[element];

    //recursive calls
    root->left = solve(in,post,index,inorderStart,position-1,nodeToIndex);
    root->right = solve(in,post,index,position+1,inorderEnd,nodeToIndex);
    return root;
}